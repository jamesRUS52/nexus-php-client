<?php
/**
 * ApiEmailConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  NexusClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.26.1-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NexusClient\Model;

use \ArrayAccess;
use \NexusClient\ObjectSerializer;

/**
 * ApiEmailConfiguration Class Doc Comment
 *
 * @category Class
 * @package  NexusClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiEmailConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApiEmailConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'host' => 'string',
        'port' => 'int',
        'username' => 'string',
        'password' => 'string',
        'from_address' => 'string',
        'subject_prefix' => 'string',
        'start_tls_enabled' => 'bool',
        'start_tls_required' => 'bool',
        'ssl_on_connect_enabled' => 'bool',
        'ssl_server_identity_check_enabled' => 'bool',
        'nexus_trust_store_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'host' => null,
        'port' => 'int32',
        'username' => null,
        'password' => null,
        'from_address' => null,
        'subject_prefix' => null,
        'start_tls_enabled' => null,
        'start_tls_required' => null,
        'ssl_on_connect_enabled' => null,
        'ssl_server_identity_check_enabled' => null,
        'nexus_trust_store_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'host' => 'host',
        'port' => 'port',
        'username' => 'username',
        'password' => 'password',
        'from_address' => 'fromAddress',
        'subject_prefix' => 'subjectPrefix',
        'start_tls_enabled' => 'startTlsEnabled',
        'start_tls_required' => 'startTlsRequired',
        'ssl_on_connect_enabled' => 'sslOnConnectEnabled',
        'ssl_server_identity_check_enabled' => 'sslServerIdentityCheckEnabled',
        'nexus_trust_store_enabled' => 'nexusTrustStoreEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'host' => 'setHost',
        'port' => 'setPort',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'from_address' => 'setFromAddress',
        'subject_prefix' => 'setSubjectPrefix',
        'start_tls_enabled' => 'setStartTlsEnabled',
        'start_tls_required' => 'setStartTlsRequired',
        'ssl_on_connect_enabled' => 'setSslOnConnectEnabled',
        'ssl_server_identity_check_enabled' => 'setSslServerIdentityCheckEnabled',
        'nexus_trust_store_enabled' => 'setNexusTrustStoreEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'host' => 'getHost',
        'port' => 'getPort',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'from_address' => 'getFromAddress',
        'subject_prefix' => 'getSubjectPrefix',
        'start_tls_enabled' => 'getStartTlsEnabled',
        'start_tls_required' => 'getStartTlsRequired',
        'ssl_on_connect_enabled' => 'getSslOnConnectEnabled',
        'ssl_server_identity_check_enabled' => 'getSslServerIdentityCheckEnabled',
        'nexus_trust_store_enabled' => 'getNexusTrustStoreEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['from_address'] = isset($data['from_address']) ? $data['from_address'] : null;
        $this->container['subject_prefix'] = isset($data['subject_prefix']) ? $data['subject_prefix'] : null;
        $this->container['start_tls_enabled'] = isset($data['start_tls_enabled']) ? $data['start_tls_enabled'] : null;
        $this->container['start_tls_required'] = isset($data['start_tls_required']) ? $data['start_tls_required'] : null;
        $this->container['ssl_on_connect_enabled'] = isset($data['ssl_on_connect_enabled']) ? $data['ssl_on_connect_enabled'] : null;
        $this->container['ssl_server_identity_check_enabled'] = isset($data['ssl_server_identity_check_enabled']) ? $data['ssl_server_identity_check_enabled'] : null;
        $this->container['nexus_trust_store_enabled'] = isset($data['nexus_trust_store_enabled']) ? $data['nexus_trust_store_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['port'] === null) {
            $invalidProperties[] = "'port' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets from_address
     *
     * @return string
     */
    public function getFromAddress()
    {
        return $this->container['from_address'];
    }

    /**
     * Sets from_address
     *
     * @param string $from_address from_address
     *
     * @return $this
     */
    public function setFromAddress($from_address)
    {
        $this->container['from_address'] = $from_address;

        return $this;
    }

    /**
     * Gets subject_prefix
     *
     * @return string
     */
    public function getSubjectPrefix()
    {
        return $this->container['subject_prefix'];
    }

    /**
     * Sets subject_prefix
     *
     * @param string $subject_prefix A prefix to add to all email subjects to aid in identifying automated emails
     *
     * @return $this
     */
    public function setSubjectPrefix($subject_prefix)
    {
        $this->container['subject_prefix'] = $subject_prefix;

        return $this;
    }

    /**
     * Gets start_tls_enabled
     *
     * @return bool
     */
    public function getStartTlsEnabled()
    {
        return $this->container['start_tls_enabled'];
    }

    /**
     * Sets start_tls_enabled
     *
     * @param bool $start_tls_enabled Enable STARTTLS Support for Insecure Connections
     *
     * @return $this
     */
    public function setStartTlsEnabled($start_tls_enabled)
    {
        $this->container['start_tls_enabled'] = $start_tls_enabled;

        return $this;
    }

    /**
     * Gets start_tls_required
     *
     * @return bool
     */
    public function getStartTlsRequired()
    {
        return $this->container['start_tls_required'];
    }

    /**
     * Sets start_tls_required
     *
     * @param bool $start_tls_required Require STARTTLS Support
     *
     * @return $this
     */
    public function setStartTlsRequired($start_tls_required)
    {
        $this->container['start_tls_required'] = $start_tls_required;

        return $this;
    }

    /**
     * Gets ssl_on_connect_enabled
     *
     * @return bool
     */
    public function getSslOnConnectEnabled()
    {
        return $this->container['ssl_on_connect_enabled'];
    }

    /**
     * Sets ssl_on_connect_enabled
     *
     * @param bool $ssl_on_connect_enabled Enable SSL/TLS Encryption upon Connection
     *
     * @return $this
     */
    public function setSslOnConnectEnabled($ssl_on_connect_enabled)
    {
        $this->container['ssl_on_connect_enabled'] = $ssl_on_connect_enabled;

        return $this;
    }

    /**
     * Gets ssl_server_identity_check_enabled
     *
     * @return bool
     */
    public function getSslServerIdentityCheckEnabled()
    {
        return $this->container['ssl_server_identity_check_enabled'];
    }

    /**
     * Sets ssl_server_identity_check_enabled
     *
     * @param bool $ssl_server_identity_check_enabled Verify the server certificate when using TLS or SSL
     *
     * @return $this
     */
    public function setSslServerIdentityCheckEnabled($ssl_server_identity_check_enabled)
    {
        $this->container['ssl_server_identity_check_enabled'] = $ssl_server_identity_check_enabled;

        return $this;
    }

    /**
     * Gets nexus_trust_store_enabled
     *
     * @return bool
     */
    public function getNexusTrustStoreEnabled()
    {
        return $this->container['nexus_trust_store_enabled'];
    }

    /**
     * Sets nexus_trust_store_enabled
     *
     * @param bool $nexus_trust_store_enabled Use the Nexus Repository Manager's certificate truststore
     *
     * @return $this
     */
    public function setNexusTrustStoreEnabled($nexus_trust_store_enabled)
    {
        $this->container['nexus_trust_store_enabled'] = $nexus_trust_store_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


