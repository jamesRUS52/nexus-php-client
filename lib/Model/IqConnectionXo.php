<?php
/**
 * IqConnectionXo
 *
 * PHP version 5
 *
 * @category Class
 * @package  NexusClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.26.1-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NexusClient\Model;

use \ArrayAccess;
use \NexusClient\ObjectSerializer;

/**
 * IqConnectionXo Class Doc Comment
 *
 * @category Class
 * @package  NexusClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IqConnectionXo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IqConnectionXo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'show_link' => 'bool',
        'url' => 'string',
        'authentication_type' => 'string',
        'username' => 'string',
        'password' => 'string',
        'use_trust_store_for_url' => 'bool',
        'timeout_seconds' => 'int',
        'properties' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'show_link' => null,
        'url' => null,
        'authentication_type' => null,
        'username' => null,
        'password' => null,
        'use_trust_store_for_url' => null,
        'timeout_seconds' => 'int32',
        'properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'show_link' => 'showLink',
        'url' => 'url',
        'authentication_type' => 'authenticationType',
        'username' => 'username',
        'password' => 'password',
        'use_trust_store_for_url' => 'useTrustStoreForUrl',
        'timeout_seconds' => 'timeoutSeconds',
        'properties' => 'properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'show_link' => 'setShowLink',
        'url' => 'setUrl',
        'authentication_type' => 'setAuthenticationType',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'use_trust_store_for_url' => 'setUseTrustStoreForUrl',
        'timeout_seconds' => 'setTimeoutSeconds',
        'properties' => 'setProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'show_link' => 'getShowLink',
        'url' => 'getUrl',
        'authentication_type' => 'getAuthenticationType',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'use_trust_store_for_url' => 'getUseTrustStoreForUrl',
        'timeout_seconds' => 'getTimeoutSeconds',
        'properties' => 'getProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHENTICATION_TYPE_USER = 'USER';
    const AUTHENTICATION_TYPE_PKI = 'PKI';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_USER,
            self::AUTHENTICATION_TYPE_PKI,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['show_link'] = isset($data['show_link']) ? $data['show_link'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['authentication_type'] = isset($data['authentication_type']) ? $data['authentication_type'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['use_trust_store_for_url'] = isset($data['use_trust_store_for_url']) ? $data['use_trust_store_for_url'] : null;
        $this->container['timeout_seconds'] = isset($data['timeout_seconds']) ? $data['timeout_seconds'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authentication_type'] === null) {
            $invalidProperties[] = "'authentication_type' can't be null";
        }
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($this->container['authentication_type']) && !in_array($this->container['authentication_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authentication_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['timeout_seconds']) && ($this->container['timeout_seconds'] > 3600)) {
            $invalidProperties[] = "invalid value for 'timeout_seconds', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['timeout_seconds']) && ($this->container['timeout_seconds'] < 1)) {
            $invalidProperties[] = "invalid value for 'timeout_seconds', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether to use IQ Server
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets show_link
     *
     * @return bool
     */
    public function getShowLink()
    {
        return $this->container['show_link'];
    }

    /**
     * Sets show_link
     *
     * @param bool $show_link Show IQ Server link in Browse menu when server is enabled
     *
     * @return $this
     */
    public function setShowLink($show_link)
    {
        $this->container['show_link'] = $show_link;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The address of your IQ Server
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets authentication_type
     *
     * @return string
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     *
     * @param string $authentication_type Authentication method
     *
     * @return $this
     */
    public function setAuthenticationType($authentication_type)
    {
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!in_array($authentication_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authentication_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username User with access to IQ Server
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Credentials for the IQ Server User
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets use_trust_store_for_url
     *
     * @return bool
     */
    public function getUseTrustStoreForUrl()
    {
        return $this->container['use_trust_store_for_url'];
    }

    /**
     * Sets use_trust_store_for_url
     *
     * @param bool $use_trust_store_for_url Use certificates stored in the Nexus Repository Manager truststore to connect to IQ Server
     *
     * @return $this
     */
    public function setUseTrustStoreForUrl($use_trust_store_for_url)
    {
        $this->container['use_trust_store_for_url'] = $use_trust_store_for_url;

        return $this;
    }

    /**
     * Gets timeout_seconds
     *
     * @return int
     */
    public function getTimeoutSeconds()
    {
        return $this->container['timeout_seconds'];
    }

    /**
     * Sets timeout_seconds
     *
     * @param int $timeout_seconds Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout.
     *
     * @return $this
     */
    public function setTimeoutSeconds($timeout_seconds)
    {

        if (!is_null($timeout_seconds) && ($timeout_seconds > 3600)) {
            throw new \InvalidArgumentException('invalid value for $timeout_seconds when calling IqConnectionXo., must be smaller than or equal to 3600.');
        }
        if (!is_null($timeout_seconds) && ($timeout_seconds < 1)) {
            throw new \InvalidArgumentException('invalid value for $timeout_seconds when calling IqConnectionXo., must be bigger than or equal to 1.');
        }

        $this->container['timeout_seconds'] = $timeout_seconds;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string $properties Additional properties to configure for IQ Server
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


