<?php
/**
 * ComponentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.26.1-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ComponentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComponentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteComponent
     *
     * Delete a single component
     *
     * @param  string $id ID of the component to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteComponent($id)
    {
        $this->deleteComponentWithHttpInfo($id);
    }

    /**
     * Operation deleteComponentWithHttpInfo
     *
     * Delete a single component
     *
     * @param  string $id ID of the component to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteComponentWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteComponentRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteComponentAsync
     *
     * Delete a single component
     *
     * @param  string $id ID of the component to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteComponentAsync($id)
    {
        return $this->deleteComponentAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteComponentAsyncWithHttpInfo
     *
     * Delete a single component
     *
     * @param  string $id ID of the component to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteComponentAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteComponentRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteComponent'
     *
     * @param  string $id ID of the component to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteComponentRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteComponent'
            );
        }

        $resourcePath = '/v1/components/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComponentById
     *
     * Get a single component
     *
     * @param  string $id ID of the component to retrieve (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ComponentXO
     */
    public function getComponentById($id)
    {
        list($response) = $this->getComponentByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getComponentByIdWithHttpInfo
     *
     * Get a single component
     *
     * @param  string $id ID of the component to retrieve (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ComponentXO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getComponentByIdWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\ComponentXO';
        $request = $this->getComponentByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ComponentXO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getComponentByIdAsync
     *
     * Get a single component
     *
     * @param  string $id ID of the component to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getComponentByIdAsync($id)
    {
        return $this->getComponentByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getComponentByIdAsyncWithHttpInfo
     *
     * Get a single component
     *
     * @param  string $id ID of the component to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getComponentByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\ComponentXO';
        $request = $this->getComponentByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComponentById'
     *
     * @param  string $id ID of the component to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getComponentByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getComponentById'
            );
        }

        $resourcePath = '/v1/components/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComponents
     *
     * List components
     *
     * @param  string $repository Repository from which you would like to retrieve components (required)
     * @param  string $continuation_token A token returned by a prior request. If present, the next page of results are returned (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PageComponentXO
     */
    public function getComponents($repository, $continuation_token = null)
    {
        list($response) = $this->getComponentsWithHttpInfo($repository, $continuation_token);
        return $response;
    }

    /**
     * Operation getComponentsWithHttpInfo
     *
     * List components
     *
     * @param  string $repository Repository from which you would like to retrieve components (required)
     * @param  string $continuation_token A token returned by a prior request. If present, the next page of results are returned (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PageComponentXO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getComponentsWithHttpInfo($repository, $continuation_token = null)
    {
        $returnType = '\Swagger\Client\Model\PageComponentXO';
        $request = $this->getComponentsRequest($repository, $continuation_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageComponentXO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getComponentsAsync
     *
     * List components
     *
     * @param  string $repository Repository from which you would like to retrieve components (required)
     * @param  string $continuation_token A token returned by a prior request. If present, the next page of results are returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getComponentsAsync($repository, $continuation_token = null)
    {
        return $this->getComponentsAsyncWithHttpInfo($repository, $continuation_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getComponentsAsyncWithHttpInfo
     *
     * List components
     *
     * @param  string $repository Repository from which you would like to retrieve components (required)
     * @param  string $continuation_token A token returned by a prior request. If present, the next page of results are returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getComponentsAsyncWithHttpInfo($repository, $continuation_token = null)
    {
        $returnType = '\Swagger\Client\Model\PageComponentXO';
        $request = $this->getComponentsRequest($repository, $continuation_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComponents'
     *
     * @param  string $repository Repository from which you would like to retrieve components (required)
     * @param  string $continuation_token A token returned by a prior request. If present, the next page of results are returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getComponentsRequest($repository, $continuation_token = null)
    {
        // verify the required parameter 'repository' is set
        if ($repository === null || (is_array($repository) && count($repository) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repository when calling getComponents'
            );
        }

        $resourcePath = '/v1/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($continuation_token !== null) {
            $queryParams['continuationToken'] = ObjectSerializer::toQueryValue($continuation_token);
        }
        // query params
        if ($repository !== null) {
            $queryParams['repository'] = ObjectSerializer::toQueryValue($repository);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadComponent
     *
     * Upload a single component
     *
     * @param  string $repository Name of the repository to which you would like to upload the component (required)
     * @param  string $yum_directory yum Directory (optional)
     * @param  \SplFileObject $yum_asset yum Asset (optional)
     * @param  string $yum_asset_filename yum Asset  Filename (optional)
     * @param  \SplFileObject $docker_asset docker Asset (optional)
     * @param  \SplFileObject $r_asset r Asset (optional)
     * @param  string $r_asset_path_id r Asset  Package Path (optional)
     * @param  \SplFileObject $pypi_asset pypi Asset (optional)
     * @param  \SplFileObject $apt_asset apt Asset (optional)
     * @param  \SplFileObject $rubygems_asset rubygems Asset (optional)
     * @param  \SplFileObject $npm_asset npm Asset (optional)
     * @param  \SplFileObject $nuget_asset nuget Asset (optional)
     * @param  \SplFileObject $helm_asset helm Asset (optional)
     * @param  string $raw_directory raw Directory (optional)
     * @param  \SplFileObject $raw_asset1 raw Asset 1 (optional)
     * @param  string $raw_asset1_filename raw Asset 1 Filename (optional)
     * @param  \SplFileObject $raw_asset2 raw Asset 2 (optional)
     * @param  string $raw_asset2_filename raw Asset 2 Filename (optional)
     * @param  \SplFileObject $raw_asset3 raw Asset 3 (optional)
     * @param  string $raw_asset3_filename raw Asset 3 Filename (optional)
     * @param  string $maven2_group_id maven2 Group ID (optional)
     * @param  string $maven2_artifact_id maven2 Artifact ID (optional)
     * @param  string $maven2_version maven2 Version (optional)
     * @param  bool $maven2_generate_pom maven2 Generate a POM file with these coordinates (optional)
     * @param  string $maven2_packaging maven2 Packaging (optional)
     * @param  \SplFileObject $maven2_asset1 maven2 Asset 1 (optional)
     * @param  string $maven2_asset1_classifier maven2 Asset 1 Classifier (optional)
     * @param  string $maven2_asset1_extension maven2 Asset 1 Extension (optional)
     * @param  \SplFileObject $maven2_asset2 maven2 Asset 2 (optional)
     * @param  string $maven2_asset2_classifier maven2 Asset 2 Classifier (optional)
     * @param  string $maven2_asset2_extension maven2 Asset 2 Extension (optional)
     * @param  \SplFileObject $maven2_asset3 maven2 Asset 3 (optional)
     * @param  string $maven2_asset3_classifier maven2 Asset 3 Classifier (optional)
     * @param  string $maven2_asset3_extension maven2 Asset 3 Extension (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadComponent($repository, $yum_directory = null, $yum_asset = null, $yum_asset_filename = null, $docker_asset = null, $r_asset = null, $r_asset_path_id = null, $pypi_asset = null, $apt_asset = null, $rubygems_asset = null, $npm_asset = null, $nuget_asset = null, $helm_asset = null, $raw_directory = null, $raw_asset1 = null, $raw_asset1_filename = null, $raw_asset2 = null, $raw_asset2_filename = null, $raw_asset3 = null, $raw_asset3_filename = null, $maven2_group_id = null, $maven2_artifact_id = null, $maven2_version = null, $maven2_generate_pom = null, $maven2_packaging = null, $maven2_asset1 = null, $maven2_asset1_classifier = null, $maven2_asset1_extension = null, $maven2_asset2 = null, $maven2_asset2_classifier = null, $maven2_asset2_extension = null, $maven2_asset3 = null, $maven2_asset3_classifier = null, $maven2_asset3_extension = null)
    {
        $this->uploadComponentWithHttpInfo($repository, $yum_directory, $yum_asset, $yum_asset_filename, $docker_asset, $r_asset, $r_asset_path_id, $pypi_asset, $apt_asset, $rubygems_asset, $npm_asset, $nuget_asset, $helm_asset, $raw_directory, $raw_asset1, $raw_asset1_filename, $raw_asset2, $raw_asset2_filename, $raw_asset3, $raw_asset3_filename, $maven2_group_id, $maven2_artifact_id, $maven2_version, $maven2_generate_pom, $maven2_packaging, $maven2_asset1, $maven2_asset1_classifier, $maven2_asset1_extension, $maven2_asset2, $maven2_asset2_classifier, $maven2_asset2_extension, $maven2_asset3, $maven2_asset3_classifier, $maven2_asset3_extension);
    }

    /**
     * Operation uploadComponentWithHttpInfo
     *
     * Upload a single component
     *
     * @param  string $repository Name of the repository to which you would like to upload the component (required)
     * @param  string $yum_directory yum Directory (optional)
     * @param  \SplFileObject $yum_asset yum Asset (optional)
     * @param  string $yum_asset_filename yum Asset  Filename (optional)
     * @param  \SplFileObject $docker_asset docker Asset (optional)
     * @param  \SplFileObject $r_asset r Asset (optional)
     * @param  string $r_asset_path_id r Asset  Package Path (optional)
     * @param  \SplFileObject $pypi_asset pypi Asset (optional)
     * @param  \SplFileObject $apt_asset apt Asset (optional)
     * @param  \SplFileObject $rubygems_asset rubygems Asset (optional)
     * @param  \SplFileObject $npm_asset npm Asset (optional)
     * @param  \SplFileObject $nuget_asset nuget Asset (optional)
     * @param  \SplFileObject $helm_asset helm Asset (optional)
     * @param  string $raw_directory raw Directory (optional)
     * @param  \SplFileObject $raw_asset1 raw Asset 1 (optional)
     * @param  string $raw_asset1_filename raw Asset 1 Filename (optional)
     * @param  \SplFileObject $raw_asset2 raw Asset 2 (optional)
     * @param  string $raw_asset2_filename raw Asset 2 Filename (optional)
     * @param  \SplFileObject $raw_asset3 raw Asset 3 (optional)
     * @param  string $raw_asset3_filename raw Asset 3 Filename (optional)
     * @param  string $maven2_group_id maven2 Group ID (optional)
     * @param  string $maven2_artifact_id maven2 Artifact ID (optional)
     * @param  string $maven2_version maven2 Version (optional)
     * @param  bool $maven2_generate_pom maven2 Generate a POM file with these coordinates (optional)
     * @param  string $maven2_packaging maven2 Packaging (optional)
     * @param  \SplFileObject $maven2_asset1 maven2 Asset 1 (optional)
     * @param  string $maven2_asset1_classifier maven2 Asset 1 Classifier (optional)
     * @param  string $maven2_asset1_extension maven2 Asset 1 Extension (optional)
     * @param  \SplFileObject $maven2_asset2 maven2 Asset 2 (optional)
     * @param  string $maven2_asset2_classifier maven2 Asset 2 Classifier (optional)
     * @param  string $maven2_asset2_extension maven2 Asset 2 Extension (optional)
     * @param  \SplFileObject $maven2_asset3 maven2 Asset 3 (optional)
     * @param  string $maven2_asset3_classifier maven2 Asset 3 Classifier (optional)
     * @param  string $maven2_asset3_extension maven2 Asset 3 Extension (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadComponentWithHttpInfo($repository, $yum_directory = null, $yum_asset = null, $yum_asset_filename = null, $docker_asset = null, $r_asset = null, $r_asset_path_id = null, $pypi_asset = null, $apt_asset = null, $rubygems_asset = null, $npm_asset = null, $nuget_asset = null, $helm_asset = null, $raw_directory = null, $raw_asset1 = null, $raw_asset1_filename = null, $raw_asset2 = null, $raw_asset2_filename = null, $raw_asset3 = null, $raw_asset3_filename = null, $maven2_group_id = null, $maven2_artifact_id = null, $maven2_version = null, $maven2_generate_pom = null, $maven2_packaging = null, $maven2_asset1 = null, $maven2_asset1_classifier = null, $maven2_asset1_extension = null, $maven2_asset2 = null, $maven2_asset2_classifier = null, $maven2_asset2_extension = null, $maven2_asset3 = null, $maven2_asset3_classifier = null, $maven2_asset3_extension = null)
    {
        $returnType = '';
        $request = $this->uploadComponentRequest($repository, $yum_directory, $yum_asset, $yum_asset_filename, $docker_asset, $r_asset, $r_asset_path_id, $pypi_asset, $apt_asset, $rubygems_asset, $npm_asset, $nuget_asset, $helm_asset, $raw_directory, $raw_asset1, $raw_asset1_filename, $raw_asset2, $raw_asset2_filename, $raw_asset3, $raw_asset3_filename, $maven2_group_id, $maven2_artifact_id, $maven2_version, $maven2_generate_pom, $maven2_packaging, $maven2_asset1, $maven2_asset1_classifier, $maven2_asset1_extension, $maven2_asset2, $maven2_asset2_classifier, $maven2_asset2_extension, $maven2_asset3, $maven2_asset3_classifier, $maven2_asset3_extension);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation uploadComponentAsync
     *
     * Upload a single component
     *
     * @param  string $repository Name of the repository to which you would like to upload the component (required)
     * @param  string $yum_directory yum Directory (optional)
     * @param  \SplFileObject $yum_asset yum Asset (optional)
     * @param  string $yum_asset_filename yum Asset  Filename (optional)
     * @param  \SplFileObject $docker_asset docker Asset (optional)
     * @param  \SplFileObject $r_asset r Asset (optional)
     * @param  string $r_asset_path_id r Asset  Package Path (optional)
     * @param  \SplFileObject $pypi_asset pypi Asset (optional)
     * @param  \SplFileObject $apt_asset apt Asset (optional)
     * @param  \SplFileObject $rubygems_asset rubygems Asset (optional)
     * @param  \SplFileObject $npm_asset npm Asset (optional)
     * @param  \SplFileObject $nuget_asset nuget Asset (optional)
     * @param  \SplFileObject $helm_asset helm Asset (optional)
     * @param  string $raw_directory raw Directory (optional)
     * @param  \SplFileObject $raw_asset1 raw Asset 1 (optional)
     * @param  string $raw_asset1_filename raw Asset 1 Filename (optional)
     * @param  \SplFileObject $raw_asset2 raw Asset 2 (optional)
     * @param  string $raw_asset2_filename raw Asset 2 Filename (optional)
     * @param  \SplFileObject $raw_asset3 raw Asset 3 (optional)
     * @param  string $raw_asset3_filename raw Asset 3 Filename (optional)
     * @param  string $maven2_group_id maven2 Group ID (optional)
     * @param  string $maven2_artifact_id maven2 Artifact ID (optional)
     * @param  string $maven2_version maven2 Version (optional)
     * @param  bool $maven2_generate_pom maven2 Generate a POM file with these coordinates (optional)
     * @param  string $maven2_packaging maven2 Packaging (optional)
     * @param  \SplFileObject $maven2_asset1 maven2 Asset 1 (optional)
     * @param  string $maven2_asset1_classifier maven2 Asset 1 Classifier (optional)
     * @param  string $maven2_asset1_extension maven2 Asset 1 Extension (optional)
     * @param  \SplFileObject $maven2_asset2 maven2 Asset 2 (optional)
     * @param  string $maven2_asset2_classifier maven2 Asset 2 Classifier (optional)
     * @param  string $maven2_asset2_extension maven2 Asset 2 Extension (optional)
     * @param  \SplFileObject $maven2_asset3 maven2 Asset 3 (optional)
     * @param  string $maven2_asset3_classifier maven2 Asset 3 Classifier (optional)
     * @param  string $maven2_asset3_extension maven2 Asset 3 Extension (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadComponentAsync($repository, $yum_directory = null, $yum_asset = null, $yum_asset_filename = null, $docker_asset = null, $r_asset = null, $r_asset_path_id = null, $pypi_asset = null, $apt_asset = null, $rubygems_asset = null, $npm_asset = null, $nuget_asset = null, $helm_asset = null, $raw_directory = null, $raw_asset1 = null, $raw_asset1_filename = null, $raw_asset2 = null, $raw_asset2_filename = null, $raw_asset3 = null, $raw_asset3_filename = null, $maven2_group_id = null, $maven2_artifact_id = null, $maven2_version = null, $maven2_generate_pom = null, $maven2_packaging = null, $maven2_asset1 = null, $maven2_asset1_classifier = null, $maven2_asset1_extension = null, $maven2_asset2 = null, $maven2_asset2_classifier = null, $maven2_asset2_extension = null, $maven2_asset3 = null, $maven2_asset3_classifier = null, $maven2_asset3_extension = null)
    {
        return $this->uploadComponentAsyncWithHttpInfo($repository, $yum_directory, $yum_asset, $yum_asset_filename, $docker_asset, $r_asset, $r_asset_path_id, $pypi_asset, $apt_asset, $rubygems_asset, $npm_asset, $nuget_asset, $helm_asset, $raw_directory, $raw_asset1, $raw_asset1_filename, $raw_asset2, $raw_asset2_filename, $raw_asset3, $raw_asset3_filename, $maven2_group_id, $maven2_artifact_id, $maven2_version, $maven2_generate_pom, $maven2_packaging, $maven2_asset1, $maven2_asset1_classifier, $maven2_asset1_extension, $maven2_asset2, $maven2_asset2_classifier, $maven2_asset2_extension, $maven2_asset3, $maven2_asset3_classifier, $maven2_asset3_extension)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadComponentAsyncWithHttpInfo
     *
     * Upload a single component
     *
     * @param  string $repository Name of the repository to which you would like to upload the component (required)
     * @param  string $yum_directory yum Directory (optional)
     * @param  \SplFileObject $yum_asset yum Asset (optional)
     * @param  string $yum_asset_filename yum Asset  Filename (optional)
     * @param  \SplFileObject $docker_asset docker Asset (optional)
     * @param  \SplFileObject $r_asset r Asset (optional)
     * @param  string $r_asset_path_id r Asset  Package Path (optional)
     * @param  \SplFileObject $pypi_asset pypi Asset (optional)
     * @param  \SplFileObject $apt_asset apt Asset (optional)
     * @param  \SplFileObject $rubygems_asset rubygems Asset (optional)
     * @param  \SplFileObject $npm_asset npm Asset (optional)
     * @param  \SplFileObject $nuget_asset nuget Asset (optional)
     * @param  \SplFileObject $helm_asset helm Asset (optional)
     * @param  string $raw_directory raw Directory (optional)
     * @param  \SplFileObject $raw_asset1 raw Asset 1 (optional)
     * @param  string $raw_asset1_filename raw Asset 1 Filename (optional)
     * @param  \SplFileObject $raw_asset2 raw Asset 2 (optional)
     * @param  string $raw_asset2_filename raw Asset 2 Filename (optional)
     * @param  \SplFileObject $raw_asset3 raw Asset 3 (optional)
     * @param  string $raw_asset3_filename raw Asset 3 Filename (optional)
     * @param  string $maven2_group_id maven2 Group ID (optional)
     * @param  string $maven2_artifact_id maven2 Artifact ID (optional)
     * @param  string $maven2_version maven2 Version (optional)
     * @param  bool $maven2_generate_pom maven2 Generate a POM file with these coordinates (optional)
     * @param  string $maven2_packaging maven2 Packaging (optional)
     * @param  \SplFileObject $maven2_asset1 maven2 Asset 1 (optional)
     * @param  string $maven2_asset1_classifier maven2 Asset 1 Classifier (optional)
     * @param  string $maven2_asset1_extension maven2 Asset 1 Extension (optional)
     * @param  \SplFileObject $maven2_asset2 maven2 Asset 2 (optional)
     * @param  string $maven2_asset2_classifier maven2 Asset 2 Classifier (optional)
     * @param  string $maven2_asset2_extension maven2 Asset 2 Extension (optional)
     * @param  \SplFileObject $maven2_asset3 maven2 Asset 3 (optional)
     * @param  string $maven2_asset3_classifier maven2 Asset 3 Classifier (optional)
     * @param  string $maven2_asset3_extension maven2 Asset 3 Extension (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadComponentAsyncWithHttpInfo($repository, $yum_directory = null, $yum_asset = null, $yum_asset_filename = null, $docker_asset = null, $r_asset = null, $r_asset_path_id = null, $pypi_asset = null, $apt_asset = null, $rubygems_asset = null, $npm_asset = null, $nuget_asset = null, $helm_asset = null, $raw_directory = null, $raw_asset1 = null, $raw_asset1_filename = null, $raw_asset2 = null, $raw_asset2_filename = null, $raw_asset3 = null, $raw_asset3_filename = null, $maven2_group_id = null, $maven2_artifact_id = null, $maven2_version = null, $maven2_generate_pom = null, $maven2_packaging = null, $maven2_asset1 = null, $maven2_asset1_classifier = null, $maven2_asset1_extension = null, $maven2_asset2 = null, $maven2_asset2_classifier = null, $maven2_asset2_extension = null, $maven2_asset3 = null, $maven2_asset3_classifier = null, $maven2_asset3_extension = null)
    {
        $returnType = '';
        $request = $this->uploadComponentRequest($repository, $yum_directory, $yum_asset, $yum_asset_filename, $docker_asset, $r_asset, $r_asset_path_id, $pypi_asset, $apt_asset, $rubygems_asset, $npm_asset, $nuget_asset, $helm_asset, $raw_directory, $raw_asset1, $raw_asset1_filename, $raw_asset2, $raw_asset2_filename, $raw_asset3, $raw_asset3_filename, $maven2_group_id, $maven2_artifact_id, $maven2_version, $maven2_generate_pom, $maven2_packaging, $maven2_asset1, $maven2_asset1_classifier, $maven2_asset1_extension, $maven2_asset2, $maven2_asset2_classifier, $maven2_asset2_extension, $maven2_asset3, $maven2_asset3_classifier, $maven2_asset3_extension);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadComponent'
     *
     * @param  string $repository Name of the repository to which you would like to upload the component (required)
     * @param  string $yum_directory yum Directory (optional)
     * @param  \SplFileObject $yum_asset yum Asset (optional)
     * @param  string $yum_asset_filename yum Asset  Filename (optional)
     * @param  \SplFileObject $docker_asset docker Asset (optional)
     * @param  \SplFileObject $r_asset r Asset (optional)
     * @param  string $r_asset_path_id r Asset  Package Path (optional)
     * @param  \SplFileObject $pypi_asset pypi Asset (optional)
     * @param  \SplFileObject $apt_asset apt Asset (optional)
     * @param  \SplFileObject $rubygems_asset rubygems Asset (optional)
     * @param  \SplFileObject $npm_asset npm Asset (optional)
     * @param  \SplFileObject $nuget_asset nuget Asset (optional)
     * @param  \SplFileObject $helm_asset helm Asset (optional)
     * @param  string $raw_directory raw Directory (optional)
     * @param  \SplFileObject $raw_asset1 raw Asset 1 (optional)
     * @param  string $raw_asset1_filename raw Asset 1 Filename (optional)
     * @param  \SplFileObject $raw_asset2 raw Asset 2 (optional)
     * @param  string $raw_asset2_filename raw Asset 2 Filename (optional)
     * @param  \SplFileObject $raw_asset3 raw Asset 3 (optional)
     * @param  string $raw_asset3_filename raw Asset 3 Filename (optional)
     * @param  string $maven2_group_id maven2 Group ID (optional)
     * @param  string $maven2_artifact_id maven2 Artifact ID (optional)
     * @param  string $maven2_version maven2 Version (optional)
     * @param  bool $maven2_generate_pom maven2 Generate a POM file with these coordinates (optional)
     * @param  string $maven2_packaging maven2 Packaging (optional)
     * @param  \SplFileObject $maven2_asset1 maven2 Asset 1 (optional)
     * @param  string $maven2_asset1_classifier maven2 Asset 1 Classifier (optional)
     * @param  string $maven2_asset1_extension maven2 Asset 1 Extension (optional)
     * @param  \SplFileObject $maven2_asset2 maven2 Asset 2 (optional)
     * @param  string $maven2_asset2_classifier maven2 Asset 2 Classifier (optional)
     * @param  string $maven2_asset2_extension maven2 Asset 2 Extension (optional)
     * @param  \SplFileObject $maven2_asset3 maven2 Asset 3 (optional)
     * @param  string $maven2_asset3_classifier maven2 Asset 3 Classifier (optional)
     * @param  string $maven2_asset3_extension maven2 Asset 3 Extension (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadComponentRequest($repository, $yum_directory = null, $yum_asset = null, $yum_asset_filename = null, $docker_asset = null, $r_asset = null, $r_asset_path_id = null, $pypi_asset = null, $apt_asset = null, $rubygems_asset = null, $npm_asset = null, $nuget_asset = null, $helm_asset = null, $raw_directory = null, $raw_asset1 = null, $raw_asset1_filename = null, $raw_asset2 = null, $raw_asset2_filename = null, $raw_asset3 = null, $raw_asset3_filename = null, $maven2_group_id = null, $maven2_artifact_id = null, $maven2_version = null, $maven2_generate_pom = null, $maven2_packaging = null, $maven2_asset1 = null, $maven2_asset1_classifier = null, $maven2_asset1_extension = null, $maven2_asset2 = null, $maven2_asset2_classifier = null, $maven2_asset2_extension = null, $maven2_asset3 = null, $maven2_asset3_classifier = null, $maven2_asset3_extension = null)
    {
        // verify the required parameter 'repository' is set
        if ($repository === null || (is_array($repository) && count($repository) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repository when calling uploadComponent'
            );
        }

        $resourcePath = '/v1/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($repository !== null) {
            $queryParams['repository'] = ObjectSerializer::toQueryValue($repository);
        }


        // form params
        if ($yum_directory !== null) {
            $formParams['yum.directory'] = ObjectSerializer::toFormValue($yum_directory);
        }
        // form params
        if ($yum_asset !== null) {
            $multipart = true;
            $formParams['yum.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($yum_asset), 'rb');
        }
        // form params
        if ($yum_asset_filename !== null) {
            $formParams['yum.asset.filename'] = ObjectSerializer::toFormValue($yum_asset_filename);
        }
        // form params
        if ($docker_asset !== null) {
            $multipart = true;
            $formParams['docker.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($docker_asset), 'rb');
        }
        // form params
        if ($r_asset !== null) {
            $multipart = true;
            $formParams['r.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($r_asset), 'rb');
        }
        // form params
        if ($r_asset_path_id !== null) {
            $formParams['r.asset.pathId'] = ObjectSerializer::toFormValue($r_asset_path_id);
        }
        // form params
        if ($pypi_asset !== null) {
            $multipart = true;
            $formParams['pypi.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($pypi_asset), 'rb');
        }
        // form params
        if ($apt_asset !== null) {
            $multipart = true;
            $formParams['apt.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($apt_asset), 'rb');
        }
        // form params
        if ($rubygems_asset !== null) {
            $multipart = true;
            $formParams['rubygems.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($rubygems_asset), 'rb');
        }
        // form params
        if ($npm_asset !== null) {
            $multipart = true;
            $formParams['npm.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($npm_asset), 'rb');
        }
        // form params
        if ($nuget_asset !== null) {
            $multipart = true;
            $formParams['nuget.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($nuget_asset), 'rb');
        }
        // form params
        if ($helm_asset !== null) {
            $multipart = true;
            $formParams['helm.asset'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($helm_asset), 'rb');
        }
        // form params
        if ($raw_directory !== null) {
            $formParams['raw.directory'] = ObjectSerializer::toFormValue($raw_directory);
        }
        // form params
        if ($raw_asset1 !== null) {
            $multipart = true;
            $formParams['raw.asset1'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($raw_asset1), 'rb');
        }
        // form params
        if ($raw_asset1_filename !== null) {
            $formParams['raw.asset1.filename'] = ObjectSerializer::toFormValue($raw_asset1_filename);
        }
        // form params
        if ($raw_asset2 !== null) {
            $multipart = true;
            $formParams['raw.asset2'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($raw_asset2), 'rb');
        }
        // form params
        if ($raw_asset2_filename !== null) {
            $formParams['raw.asset2.filename'] = ObjectSerializer::toFormValue($raw_asset2_filename);
        }
        // form params
        if ($raw_asset3 !== null) {
            $multipart = true;
            $formParams['raw.asset3'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($raw_asset3), 'rb');
        }
        // form params
        if ($raw_asset3_filename !== null) {
            $formParams['raw.asset3.filename'] = ObjectSerializer::toFormValue($raw_asset3_filename);
        }
        // form params
        if ($maven2_group_id !== null) {
            $formParams['maven2.groupId'] = ObjectSerializer::toFormValue($maven2_group_id);
        }
        // form params
        if ($maven2_artifact_id !== null) {
            $formParams['maven2.artifactId'] = ObjectSerializer::toFormValue($maven2_artifact_id);
        }
        // form params
        if ($maven2_version !== null) {
            $formParams['maven2.version'] = ObjectSerializer::toFormValue($maven2_version);
        }
        // form params
        if ($maven2_generate_pom !== null) {
            $formParams['maven2.generate-pom'] = ObjectSerializer::toFormValue($maven2_generate_pom);
        }
        // form params
        if ($maven2_packaging !== null) {
            $formParams['maven2.packaging'] = ObjectSerializer::toFormValue($maven2_packaging);
        }
        // form params
        if ($maven2_asset1 !== null) {
            $multipart = true;
            $formParams['maven2.asset1'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($maven2_asset1), 'rb');
        }
        // form params
        if ($maven2_asset1_classifier !== null) {
            $formParams['maven2.asset1.classifier'] = ObjectSerializer::toFormValue($maven2_asset1_classifier);
        }
        // form params
        if ($maven2_asset1_extension !== null) {
            $formParams['maven2.asset1.extension'] = ObjectSerializer::toFormValue($maven2_asset1_extension);
        }
        // form params
        if ($maven2_asset2 !== null) {
            $multipart = true;
            $formParams['maven2.asset2'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($maven2_asset2), 'rb');
        }
        // form params
        if ($maven2_asset2_classifier !== null) {
            $formParams['maven2.asset2.classifier'] = ObjectSerializer::toFormValue($maven2_asset2_classifier);
        }
        // form params
        if ($maven2_asset2_extension !== null) {
            $formParams['maven2.asset2.extension'] = ObjectSerializer::toFormValue($maven2_asset2_extension);
        }
        // form params
        if ($maven2_asset3 !== null) {
            $multipart = true;
            $formParams['maven2.asset3'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($maven2_asset3), 'rb');
        }
        // form params
        if ($maven2_asset3_classifier !== null) {
            $formParams['maven2.asset3.classifier'] = ObjectSerializer::toFormValue($maven2_asset3_classifier);
        }
        // form params
        if ($maven2_asset3_extension !== null) {
            $formParams['maven2.asset3.extension'] = ObjectSerializer::toFormValue($maven2_asset3_extension);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
